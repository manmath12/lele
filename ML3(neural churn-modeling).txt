# Importing necessary libraries
import numpy as np
import pandas as pd
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

# Reading the dataset
df = pd.read_csv('Churn_Modelling.csv')

# Display the first few rows of the dataset
print(df.head())

# One-hot encode categorical columns (Geography and Gender)
df_encoded = pd.get_dummies(df, columns=['Geography', 'Gender'], drop_first=True)

# Now split the dataset again after encoding
X = df_encoded.drop(columns=['Exited', 'CustomerId', 'Surname'])  # Drop non-predictive columns
y = df_encoded['Exited']  # Target variable

# Split the dataset into training and test sets (80% training, 20% testing)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initializing the StandardScaler
scaler = StandardScaler()

# Fit the scaler on the training set and transform both training and test sets
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Initializing the neural network
model = tf.keras.Sequential()

# Adding input layer and first hidden layer with ReLU activation
model.add(tf.keras.layers.Dense(units=64, activation='relu', input_dim=X_train.shape[1]))

# Adding second hidden layer
model.add(tf.keras.layers.Dense(units=32, activation='relu'))

# Adding output layer (1 node with sigmoid activation for binary classification)
model.add(tf.keras.layers.Dense(units=1, activation='sigmoid'))

# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Training the model
history = model.fit(X_train, y_train, epochs=10, batch_size=32, validation_data=(X_test, y_test))

# Make predictions on the test set
y_pred = (model.predict(X_test) > 0.5)  # Convert probabilities to binary predictions

# Print the accuracy score
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy * 100:.2f}%")

# Print the confusion matrix
cm = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:")
print(cm)

# Plotting the confusion matrix for better visualization
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=["Stayed", "Exited"], yticklabels=["Stayed", "Exited"])
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.show()
